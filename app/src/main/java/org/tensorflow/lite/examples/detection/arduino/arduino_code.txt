#include <SoftwareSerial.h>
#include <NewPing.h>
#include <Servo.h>

#define TRIGGER_PIN  12  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     13  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 400 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

unsigned int pingSpeed = 200; // How frequently are we going to send out a ping (in milliseconds). 50ms would be 20 times a second.
unsigned long pingTimer;     // Holds the next ping time.
boolean isObjactleAhead = false;
//bt
SoftwareSerial btm(2, 3); // rx tx
int index = 0;
char data[10];
char command = 'S';
char prevCommand = 'S';
int velocity = 200; //NOT WORKING
boolean isStoped = true;

//pin for servo
#define SERVO_PIN  9
Servo servo;
int pointFW = 85;
int pointLEFT = 175;
int pointRIGHT = 0;
int servoAngleStep = 10;
int servoAngle = 0;
bool servoAngleIncrease = true;
bool isSonarPingReceived = true; // to start the initial process
// ping is possible not to be received if the distance is too far
//(or the sound is not bounced back. e.g clothes that absorb sound)
// So, try twice at each angle, and if no result is returned, set it to -1
int sonarPingsSentAtSpecificAngle = 0;

// pins for motors
int motor1pin1 = 5;
int motor1pin2 = 6;

int motor2pin1 = 8;
int motor2pin2 = 7;

//int motor1Speed = 0; // not used
//int motor2Speed = 0; // not used

int sonarIterations = 5;

void setup() {
  // servo
  servo.attach(SERVO_PIN);
  //bluetooth
  btm.begin(9600);
  //btm.begin(19200);
  // L289N pins
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  //pinMode(motor1Speed, OUTPUT);
  //pinMode(motor2Speed, OUTPUT);

  // for sonar
  pingTimer = millis(); // Start now.


  Serial.begin(115200);
  Serial.println("Enter AT commands:");

}
void loop() {
  //delay(500);

  // Notice how there's no delays in this sketch to allow you to do other processing in-line while doing distance pings.
  if (millis() >= pingTimer) {   // pingSpeed milliseconds since last ping, do another ping.

    if (isSonarPingReceived || (sonarPingsSentAtSpecificAngle > 2)) { // change the angle to get a new ping reading if previous ping result is received
      sonarPingsSentAtSpecificAngle = 0;
      if (servoAngleIncrease) {
        if (servoAngle < 180) {
          servoAngle = servoAngle + servoAngleStep;
        } else {
          servoAngleIncrease = false;
        }
      } else {
        if (servoAngle > 0) {
          servoAngle = servoAngle - servoAngleStep;
        } else {
          servoAngleIncrease = true;
        }
      }
      servo.write(servoAngle);
    }

    pingTimer += pingSpeed;      // Set the next ping time.
    sonar.ping_timer(echoCheck); // Send out the ping, calls "echoCheck" function every 24uS where you can check the ping status.
    isSonarPingReceived = false;
    sonarPingsSentAtSpecificAngle++;
    Serial.print("Send ping @ angle : ");
    Serial.print(servoAngle);
    Serial.print(" / ");

  }
  if (btm.available() > 0)
  {
    command = btm.read();

    //Change pin mode only if new command is different from previous.
    if (command != prevCommand) {
      Serial.write(command);
      //Serial.write(" / v=");
      //Serial.write(velocity);
      Serial.println();
      prevCommand = command;
    }
  }

  switch (command) {
    case 'F':
      Forward_4W(velocity);
      break;
    case 'B':
      Back_4W(velocity);
      break;
    case 'L':
      Left_4W();
      break;
    case 'R':
      Right_4W();
      break;
    case 'S':
      Stopped_4W();
      break;
    case 'I':  //FR
      ForwardRight_4W(velocity);
      break;
    case 'J':  //BR
      BackRight_4W(velocity);
      break;
    case 'G':  //FL
      ForwardLeft_4W(velocity);
      break;
    case 'H':  //BL
      BackLeft_4W(velocity);
      break;
    case 'W':  //Font ON
      //digitalWrite(pinfrontLights, HIGH);
      break;
    case 'w':  //Font OFF
      //digitalWrite(pinfrontLights, LOW);
      break;
    case 'U':  //Back ON
      //digitalWrite(pinbackLights, HIGH);
      break;
    case 'u':  //Back OFF
      //digitalWrite(pinbackLights, LOW);
      break;
    case 'D':  //Everything OFF
      //digitalWrite(pinfrontLights, LOW);
      //digitalWrite(pinbackLights, LOW);
      Stopped_4W();
      break;
    default:  //Get velocity
      velocity = 100;
      /*
        if (command == 'q') {
        velocity = 255;  //Full velocity
        }
        else {
        //Chars '0' - '9' have an integer equivalence of 48 - 57, accordingly.
        if ((command >= 48) && (command <= 57)) {
          //Subtracting 48 changes the range from 48-57 to 0-9.
          //Multiplying by 25 changes the range from 0-9 to 0-225.
          velocity = (command - 48) * 25;
        }
        }
        Serial.write("-- velocity adjustment --");
        Serial.write(command);
        Serial.write(" / v=");
        Serial.write(velocity);
        Serial.println();
      */
  }
}

void echoCheck() { // Timer2 interrupt calls this function every 24uS where you can check the ping status.
  // Don't do anything here!
  if (sonar.check_timer()) { // This is how you check to see if the ping was received.
    // Here's where you can add code.
    isSonarPingReceived = true;
    sonarPingsSentAtSpecificAngle = 0;
    Serial.print("Ping @ angle ");
    Serial.print(servoAngle);
    Serial.print(" : ");
    Serial.print(sonar.ping_result / US_ROUNDTRIP_CM); // Ping returned, uS result in ping_result, convert to cm with US_ROUNDTRIP_CM.
    Serial.println("cm");
    if ((sonar.ping_result / US_ROUNDTRIP_CM) < 20 && (sonar.ping_result / US_ROUNDTRIP_CM) != 0) {
      isObjactleAhead = true;
    }
  }
  // Don't do anything here!
}

void Forward_4W(int velocity) {

  Serial.write("Forward_4W");
  Serial.println();

  //Controlling speed (0 = off and 255 = max speed):
  //analogWrite(motor1Speed, velocity); //ENA pin
  //analogWrite(motor2Speed, velocity); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void Back_4W(int velocity) {

  //Controlling speed (0 = off and 255 = max speed):
  //analogWrite(motor1Speed, velocity); //ENA pin
  //analogWrite(motor2Speed, velocity); //ENB pin

  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

void Left_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  // analogWrite(motor1Speed, 0); //ENA pin
  // analogWrite(motor2Speed, 100); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

void Right_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  // analogWrite(motor1Speed, 100); //ENA pin
  // analogWrite(motor2Speed, 0); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void Stopped_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  // analogWrite(motor1Speed, 0); //ENA pin
  // analogWrite(motor2Speed, 0); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

void ForwardRight_4W(int velocity) {

  //  //Controlling speed (0 = off and 255 = max speed):
  //  analogWrite(motor1Speed, velocity); //ENA pin
  //  analogWrite(motor2Speed, velocity / 2); //ENB pin
  //
  //  digitalWrite(motor1pin1, HIGH);
  //  digitalWrite(motor1pin2, LOW);
  //
  //  digitalWrite(motor2pin1, LOW);
  //  digitalWrite(motor2pin2, LOW);
}

void BackRight_4W(int velocity) {

}

void ForwardLeft_4W(int velocity) {

}

void BackLeft_4W(int velocity) {

}