#include <SoftwareSerial.h>
#include <NewPing.h>
#include <Servo.h>

#define TRIGGER_PIN  12  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     13  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 400 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

unsigned int pingSpeed = 200; // How frequently are we going to send out a ping (in milliseconds). 50ms would be 20 times a second.
unsigned long pingTimer;     // Holds the next ping time.


//knock sensor - bumber infront of car
#define KNOCK_SENSOR_ANALOG_PIN  A0 // the piezo is connected to analog pin 0
const int KNOCK_SENSOR_threshold = 50;  // threshold value to decide when the detected sound is a knock or not
int KNOCK_SENSOR_reading = 0;      // variable to store the value read from the sensor pin
boolean isObjactleAhead = false;
unsigned long KNOCK_MOVE_BACK_timer = 0;     // Holds the time we are backing up from an obstacle

//bt
SoftwareSerial btm(2, 3); // rx tx
int index = 0;
char data[10];
String command = "dummy";
String prevCommand = "prevDummy";
int velocity = 100;
boolean isAllStoped = true;

//pin for servo
#define SERVO_PIN  10
Servo servo;
int pointFW = 85;
int pointLEFT = 175;
int pointRIGHT = 0;
int servoAngleStep = 10;
int servoAngle = 0;
bool servoAngleIncrease = true;
bool isSonarPingReceived = true; // to start the initial process
// ping is possible not to be received if the distance is too far
//(or the sound is not bounced back. e.g clothes that absorb sound)
// So, try twice at each angle, and if no result is returned, set it to -1
int sonarPingsSentAtSpecificAngle = 0;

// pins for motors
int motor1pin1 = 4;
int motor1pin2 = 7;

int motor2pin1 = 9;
int motor2pin2 = 8;

int motor1Speed = 5; // not used
int motor2Speed = 6; // not used

int sonarIterations = 5;

void setup() {
  // servo
  servo.attach(SERVO_PIN);
  //bluetooth
  btm.begin(9600);
  //btm.begin(19200);
  // L289N pins
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  pinMode(motor1Speed, OUTPUT);
  pinMode(motor2Speed, OUTPUT);

  // for sonar
  pingTimer = millis(); // Start now.


  Serial.begin(115200);
  Serial.println("Enter AT commands:");

}
void loop() {
  //delay(500);

  // if we have identified an obstacle, we are backing up.
  if (isObjactleAhead) {
    // back up for 1/2 seconds
    if (millis() - KNOCK_MOVE_BACK_timer < 500) {
      Back_4W();
    } else {
      isObjactleAhead  = false;
      KNOCK_MOVE_BACK_timer = 0;
    }
  }
  if (isObjactleAhead) {
    return; // skip anything else and continue moving backwards to avoid objstacle // TODO
  }
  KNOCK_SENSOR_reading = analogRead(KNOCK_SENSOR_ANALOG_PIN);
  // if the sensor reading is greater than the threshold:
  if (KNOCK_SENSOR_reading >= KNOCK_SENSOR_threshold) {
    //isObjactleAhead  = true; // DEBUG
    KNOCK_MOVE_BACK_timer = millis();
  }

  scanWithSonarFW();

  // receiving BT commands should be active even if isAllStopped is true, to receive the next command
  if (btm.available() > 0)
  {
    command = btm.readString();

    //Change pin mode only if new command is different from previous.
    if (command != prevCommand) {
      Serial.print(command);
      //Serial.write(" / v=");
      //Serial.write(velocity);
      Serial.println();
      prevCommand = command;
    }

    processCommand(command);
  }
}

void processCommand(String command) {
  if (command == "F") {
    Forward_4W();
    isAllStoped = false;
  } else if (command == "B") {
    Back_4W();
    // backing up could be triggered by objstacle avoidance, so...
    if (!isObjactleAhead) {
      isAllStoped = false;
    }
  } else if (command == "L") {
    Left_4W();
    isAllStoped = false;
  } else if (command == "R") {
    Right_4W();
    isAllStoped = false;
  } else if (command == "S") {
    Stopped_4W();
    isAllStoped = false;
  } else if (command == "D") {

    //Everything OFF
    //digitalWrite(pinfrontLights, LOW);
    //digitalWrite(pinbackLights, LOW);
    Stopped_4W();
    isAllStoped = true; //
  } else if (command == "SCAN") {

    //Everything OFF
    Stopped_4W();
    isAllStoped = true;
    // scan with sonar 180degrees in fron of vehicle to determine next move
    scanWithSonar180();
  } else {
    //Get velocity
    velocity = 100;

    if (command == "q")  {
      velocity = 255;  //Full velocity
    }
    else {
      //Chars '0' - '9' have an integer equivalence of 48 - 57, accordingly.
      if (command == "0")  velocity = 0;
      if (command == "1")  velocity = 25;
      if (command == "2")  velocity = 50;
      if (command == "3")  velocity = 75;
      if (command == "4")  velocity = 100;
      if (command == "5")  velocity = 125;
      if (command == "6")  velocity = 150;
      if (command == "7")  velocity = 175;
      if (command == "8")  velocity = 200;
      if (command == "9")  velocity = 225;

    }
    if (velocity != 100) {
      Serial.write("-- velocity adjustment --");
      Serial.print(command);
      Serial.write(" / v=");
      Serial.print(velocity);
      Serial.println();
    }

  }
}

// SPECIAL Sonar scan with the servo doing a 180 degree travel.
// Normally car should be stopped.
// The sonar scan happens in this blocking function. Not with using interupt ("echoCheck")
void scanWithSonar180() {

  servoAngle = 0;
  servo.write(servoAngle);
  delay(500);

  while (servoAngle <= 180) {
    Serial.print("Send ping @ angle : ");
    Serial.print(servoAngle);
    Serial.print(" / ");
    Serial.print(sonar.ping_cm()); // Send ping, get distance in cm and print result (0 = outside set distance range)
    Serial.println("cm");
    delay(50);
    servoAngle = servoAngle + servoAngleStep;
    servo.write(servoAngle);
    delay(500);
  }

  servoAngle = 180;
  servo.write(servoAngle);

  while (servoAngle >= 0) {
    Serial.print("Send ping @ angle : ");
    Serial.print(servoAngle);
    Serial.print(" / ");
    Serial.print(sonar.ping_cm()); // Send ping, get distance in cm and print result (0 = outside set distance range)
    Serial.println("cm");
    sonar.ping_cm();
    delay(50);
    servoAngle = servoAngle - servoAngleStep;
    servo.write(servoAngle);
    delay(500);
  }

  // return to normal fron facing position
  servoAngle = pointFW;
  servo.write(servoAngle);

}

// REGULAR Sonar scan with the servo at the FW position
void scanWithSonarFW() {

  if (!isAllStoped) {
    // skip regular Sonar  if everythning is stopped

    if (servoAngle != pointFW) {
      servoAngle = pointFW;
      servo.write(servoAngle);
    }
    // Notice how there's no delays in this sketch to allow you to do other processing in-line while doing distance pings.
    if (millis() >= pingTimer) {   // pingSpeed milliseconds since last ping, do another ping.

      pingTimer += pingSpeed;      // Set the next ping time.
      sonar.ping_timer(echoCheck); // Send out the ping, calls "echoCheck" function every 24uS where you can check the ping status.
      isSonarPingReceived = false;
      Serial.print("Send ping @ angle : ");
      Serial.print(servoAngle);
      Serial.print(" / ");

    }
  }
}

void echoCheck() { // Timer2 interrupt calls this function every 24uS where you can check the ping status.
  // Don't do anything here!
  if (isAllStoped) return; // No sonar is used when isAllStopped is true
  if (sonar.check_timer()) { // This is how you check to see if the ping was received.
    // Here's where you can add code.
    isSonarPingReceived = true;
    Serial.print("Ping @ angle ");
    Serial.print(servoAngle);
    Serial.print(" : ");
    Serial.print(sonar.ping_result / US_ROUNDTRIP_CM); // Ping returned, uS result in ping_result, convert to cm with US_ROUNDTRIP_CM.
    Serial.println("cm");
    if ((sonar.ping_result / US_ROUNDTRIP_CM) < 20 && (sonar.ping_result / US_ROUNDTRIP_CM) != 0) {
      //TODO
    }
  }
  // Don't do anything here!
}

void Forward_4W() {

  //Serial.write("Forward_4W");
  //Serial.println();

  //Controlling speed (0 = off and 255 = max speed):
  analogWrite(motor1Speed, velocity); //ENA pin
  analogWrite(motor2Speed, velocity); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void Back_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  analogWrite(motor1Speed, velocity); //ENA pin
  analogWrite(motor2Speed, velocity); //ENB pin

  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

void Left_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  analogWrite(motor1Speed, 100); //ENA pin
  analogWrite(motor2Speed, 0); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

void Right_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  analogWrite(motor1Speed, 0); //ENA pin
  analogWrite(motor2Speed, 100); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void Stopped_4W() {

  //Controlling speed (0 = off and 255 = max speed):
  analogWrite(motor1Speed, 0); //ENA pin
  analogWrite(motor2Speed, 0); //ENB pin

  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

void ForwardRight_4W() {

  //  //Controlling speed (0 = off and 255 = max speed):
  //  analogWrite(motor1Speed, velocity); //ENA pin.
  //  analogWrite(motor2Speed, velocity / 2); //ENB pin
  //
  //  digitalWrite(motor1pin1, HIGH);
  //  digitalWrite(motor1pin2, LOW);
  //
  //  digitalWrite(motor2pin1, LOW);
  //  digitalWrite(motor2pin2, LOW);
}

void BackRight_4W() {

}

void ForwardLeft_4W() {

}

void BackLeft_4W() {

}